package programmers.lv2;

/* 프로그래머스 250135번 아날로그 시계 문제

[문제 풀이]
우선 진님의 도움으로 시계를 43200(12×60×60)로 표현하는 방법으로 시작을 하게 되어
시작시간과 끝나는 시간을 43200(12×60×60)로 표시하고
    #1번 트라이
입력받은 각 시침과 분침, 초침을 43200기준으로 변경한 뒤에 초당 시침은 1, 분침은 12, 초침은 720씩 움직이게 하고
43200에 도달할 시 0으로 다시 초기화를 하여 서로가 겹친 경우의 수를 구하려 했지만 
대부분 겹치지 않고 초침이 지나가는 경우가 많아서 실패
    #2번 트라이
지나가는 경우로 구하기 위해 분침보다 708씩, 시침보다 719씩 더 움직이는 것을 이용하여 
초침보다 708과 719내에 분침과 시침이 존재하는지로 겹치는 횟수를 구하려했지만
생각보다 구현이 잘 되지 않아서 실패
    #3번 트라이
종료 시점까지 겹친 횟수 - 시작 지점까지 겹친 횟수 + 시작 지점이 겹칠 경우 추가
1번과 2번에 껴있는 값을 구할때 처음부터 1번까지와 처음부터 2번까지를 빼서 구하는 방법을 사용
시간당 분침과 시침이 초침과 겹치는 횟수를 미리 구해놓고
종료 시점과 시작 시점에 각각 곱한 뒤에 종료 시점에서 시작 지점을 뺌 + 시작 지점이 겹칠 경우 추가
*/  



import java.util.*;

class Solution {
    public int solution(int h1, int m1, int s1, int h2, int m2, int s2) {
        //시작시간과 끝나는 시간을 43200(12×60×60)로 표시
        int clock = 43200;
        int t1 = h1 * 3600 + m1 * 60 + s1;
        int t2 = h2 * 3600 + m2 * 60 + s2;
        
        //종료 시점까지 겹친 횟수 - 시작 지점까지 겹친 횟수
        long answer = count(t2) - count(t1);
        
        //시작 지점이 겹칠 경우 추가
        if (s1 == 0 && m1 == 0) {
            answer += 1;
        }
        return (int) answer;
    }
    private long count(int t) {
        // 초–분: 1초당 초가 더 많이 움직이는 량 708tick
        //43200의 한바퀴를 초가 따라잡으려면 43200/708 = 61.0169492
        //한 시간에 겹치는 횟수 = 3600 / 61.0169492 = 59
        long sm = (long) t * 59 / 3600;

        // 초–시: 1초당 초가 더 많이 움직이는 량 719tick
        //43200의 한바퀴를 초가 따라잡으려면 43200/719 = 60.0834492
        //열두 시간에 겹치는 횟수 = 43200 / 60.0834492 = 719
        long sh = (long) t * 719 / 43200;
        
        // 12시에 둘 다 겹칠 경우
        long both = t / 43200;

        //분겹침 + 시겹침 - 동시겹침
        return sm + sh - both;
    }
}